{"version":3,"sources":["test.bridge.js"],"names":["assert","require","path","describe","bridgeURL","resolve","__dirname","it","result","browser","url","execute","truly","value","equal","Infinity","undefined","NaN"],"mappings":"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","file":"test.bridge.js","sourcesContent":["\"use strict\";\r\n\r\n/*;\r\n\t@test-license:\r\n\t\tThe MIT License (MIT)\r\n\t\t@mit-license\r\n\r\n\t\tCopyright (@c) 2017 Richeve Siodina Bebedor\r\n\t\t@email: richeve.bebedor@gmail.com\r\n\r\n\t\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\t\tof this software and associated documentation files (the \"Software\"), to deal\r\n\t\tin the Software without restriction, including without limitation the rights\r\n\t\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\t\tcopies of the Software, and to permit persons to whom the Software is\r\n\t\tfurnished to do so, subject to the following conditions:\r\n\r\n\t\tThe above copyright notice and this permission notice shall be included in all\r\n\t\tcopies or substantial portions of the Software.\r\n\r\n\t\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\t\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\t\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\t\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\t\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\t\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\t\tSOFTWARE.\r\n\t@end-test-license\r\n\r\n\t@test-configuration:\r\n\t\t{\r\n\t\t\t\"package\": \"truly\",\r\n\t\t\t\"path\": \"truly/test.module.js\",\r\n\t\t\t\"file\": \"test.module.js\",\r\n\t\t\t\"module\": \"test\",\r\n\t\t\t\"author\": \"Richeve S. Bebedor\",\r\n\t\t\t\"eMail\": \"richeve.bebedor@gmail.com\",\r\n\t\t\t\"contributors\": [\r\n\t\t\t\t\"John Lenon Maghanoy <johnlenonmaghanoy@gmail.com>\",\r\n\t\t\t\t\"Vinse Vinalon <vinsevinalon@gmail.com>\"\r\n\t\t\t],\r\n\t\t\t\"repository\": \"https://github.com/volkovasystems/truly.git\"\r\n\t\t}\r\n\t@end-test-configuration\r\n\r\n\t@test-documentation:\r\n\r\n\t@end-test-documentation\r\n\r\n\t@include:\r\n\t\t{\r\n\t\t\t\"assert\": \"should\",\r\n\t\t\t\"truly\": \"truly\"\r\n\t\t}\r\n\t@end-include\r\n*/\r\n\r\nconst assert = require( \"should\" );\r\n\r\n\r\n\r\n\r\n\r\n//: @bridge:\r\nconst path = require( \"path\" );\r\n//: @end-bridge\r\n\r\n\r\n\r\n\r\n\r\n\r\n//: @bridge:\r\n\r\ndescribe( \"truly\", ( ) => {\r\n\r\n\tlet bridgeURL = `file://${ path.resolve( __dirname, \"bridge.html\" ) }`;\r\n\r\n\tdescribe( \"`truly( 'hello' )`\", ( ) => {\r\n\t\tit( \"should be equal to true\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( \"hello\" );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, true );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( { } )`\", ( ) => {\r\n\t\tit( \"should be equal to true\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( { } );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, true );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( [ ] )`\", ( ) => {\r\n\t\tit( \"should be equal to true\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( [ ] );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, true );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( function( ){ } )`\", ( ) => {\r\n\t\tit( \"should be equal to true\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( function( ){ } );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, true );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( 123 )`\", ( ) => {\r\n\t\tit( \"should be equal to true\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( 123 );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, true );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( true )`\", ( ) => {\r\n\t\tit( \"should be equal to true\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( true );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, true );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( Infinity )`\", ( ) => {\r\n\t\tit( \"should be equal to true\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( Infinity );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, true );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( 0 )`\", ( ) => {\r\n\t\tit( \"should be equal to true\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( 0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, true );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( undefined )`\", ( ) => {\r\n\t\tit( \"should be equal to false\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( undefined );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, false );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( )`\", ( ) => {\r\n\t\tit( \"should be equal to false\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, false );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( null )`\", ( ) => {\r\n\t\tit( \"should be equal to false\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( null );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, false );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( NaN )`\", ( ) => {\r\n\t\tit( \"should be equal to false\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( NaN );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, false );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( 0/0 )`\", ( ) => {\r\n\t\tit( \"should be equal to false\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( 0/0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, false );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n\r\n\tdescribe( \"`truly( '' )`\", ( ) => {\r\n\t\tit( \"should be equal to false\", ( ) => {\r\n\r\n\t\t\tlet result = browser.url( bridgeURL ).execute(\r\n\r\n\t\t\t\tfunction( ){\r\n\t\t\t\t\treturn truly( \"\" );\r\n\t\t\t\t}\r\n\r\n\t\t\t).value;\r\n\r\n\t\t\tassert.equal( result, false );\r\n\r\n\t\t} );\r\n\t} );\r\n\r\n} );\r\n\r\n//: @end-bridge\r\n"]}