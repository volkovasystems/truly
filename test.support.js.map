{"version":3,"sources":["test.support.js"],"names":["assert","require","truly","equal","Infinity","undefined","NaN","console","log"],"mappings":";AACA,IAAMA,SAASC,QAAS,QAAT,CAAf;AACA,IAAMC,QAAQD,QAAS,YAAT,CAAd;;AAEAD,OAAOG,KAAP,CAAcD,MAAO,OAAP,CAAd,EAAgC,IAAhC,EAAsC,gBAAtC;;AAEAF,OAAOG,KAAP,CAAcD,MAAO,EAAP,CAAd,EAA4B,IAA5B,EAAkC,gBAAlC;;AAEAF,OAAOG,KAAP,CAAcD,MAAO,EAAP,CAAd,EAA4B,IAA5B,EAAkC,gBAAlC;;AAEAF,OAAOG,KAAP,CAAcD,MAAO,YAAW,CAAG,CAArB,CAAd,EAAuC,IAAvC,EAA6C,gBAA7C;;AAEAF,OAAOG,KAAP,CAAcD,MAAO,GAAP,CAAd,EAA4B,IAA5B,EAAkC,gBAAlC;;AAEAF,OAAOG,KAAP,CAAcD,MAAO,IAAP,CAAd,EAA6B,IAA7B,EAAmC,gBAAnC;;AAEAF,OAAOG,KAAP,CAAcD,MAAO,IAAP,CAAd,EAA6B,IAA7B,EAAmC,gBAAnC;;AAEAF,OAAOG,KAAP,CAAcD,MAAOE,QAAP,CAAd,EAAiC,IAAjC,EAAuC,gBAAvC;;AAEAJ,OAAOG,KAAP,CAAcD,MAAO,CAAP,CAAd,EAA0B,IAA1B,EAAgC,gBAAhC;;AAEAF,OAAOG,KAAP,CAAcD,MAAOG,SAAP,CAAd,EAAkC,KAAlC,EAAyC,iBAAzC;;AAEAL,OAAOG,KAAP,CAAcD,OAAd,EAAwB,KAAxB,EAA+B,iBAA/B;;AAEAF,OAAOG,KAAP,CAAcD,MAAO,IAAP,CAAd,EAA6B,KAA7B,EAAoC,iBAApC;;AAEAF,OAAOG,KAAP,CAAcD,MAAOI,GAAP,CAAd,EAA4B,KAA5B,EAAmC,iBAAnC;;AAEAN,OAAOG,KAAP,CAAcD,MAAO,IAAE,CAAT,CAAd,EAA4B,KAA5B,EAAmC,iBAAnC;;AAEAF,OAAOG,KAAP,CAAcD,MAAO,EAAP,CAAd,EAA2B,KAA3B,EAAkC,iBAAlC;;AAEAK,QAAQC,GAAR,CAAa,IAAb","file":"test.support.js","sourcesContent":["\r\nconst assert = require( \"assert\" );\r\nconst truly = require( \"./truly.js\" );\r\n\r\nassert.equal( truly( \"hello\" ), true, \"should be true\" );\r\n\r\nassert.equal( truly( { } ), true, \"should be true\" );\r\n\r\nassert.equal( truly( [ ] ), true, \"should be true\" );\r\n\r\nassert.equal( truly( function( ){ } ), true, \"should be true\" );\r\n\r\nassert.equal( truly( 123 ), true, \"should be true\" );\r\n\r\nassert.equal( truly( true ), true, \"should be true\" );\r\n\r\nassert.equal( truly( true ), true, \"should be true\" );\r\n\r\nassert.equal( truly( Infinity ), true, \"should be true\" );\r\n\r\nassert.equal( truly( 0 ), true, \"should be true\" );\r\n\r\nassert.equal( truly( undefined ), false, \"should be false\" );\r\n\r\nassert.equal( truly( ), false, \"should be false\" );\r\n\r\nassert.equal( truly( null ), false, \"should be false\" );\r\n\r\nassert.equal( truly( NaN ), false, \"should be false\" );\r\n\r\nassert.equal( truly( 0/0 ), false, \"should be false\" );\r\n\r\nassert.equal( truly( \"\" ), false, \"should be false\" );\r\n\r\nconsole.log( \"ok\" );\r\n"]}