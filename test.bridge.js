"use strict";
























































var assert=require("should");






var path=require("path");









describe("truly",function(){

var bridgeURL="file://"+path.resolve(__dirname,"bridge.html");

describe("`truly( 'hello' )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly("hello");
}).

value;

assert.equal(result,true);

});
});


describe("`truly( { } )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly({});
}).

value;

assert.equal(result,true);

});
});


describe("`truly( [ ] )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly([]);
}).

value;

assert.equal(result,true);

});
});


describe("`truly( function( ){ } )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly(function(){});
}).

value;

assert.equal(result,true);

});
});


describe("`truly( 123 )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly(123);
}).

value;

assert.equal(result,true);

});
});


describe("`truly( true )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly(true);
}).

value;

assert.equal(result,true);

});
});


describe("`truly( Infinity )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly(Infinity);
}).

value;

assert.equal(result,true);

});
});


describe("`truly( 0 )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly(0);
}).

value;

assert.equal(result,true);

});
});


describe("`truly( undefined )`",function(){
it("should be equal to false",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly(undefined);
}).

value;

assert.equal(result,false);

});
});


describe("`truly( )`",function(){
it("should be equal to false",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly();
}).

value;

assert.equal(result,false);

});
});


describe("`truly( null )`",function(){
it("should be equal to false",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly(null);
}).

value;

assert.equal(result,false);

});
});


describe("`truly( NaN )`",function(){
it("should be equal to false",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly(NaN);
}).

value;

assert.equal(result,false);

});
});


describe("`truly( 0/0 )`",function(){
it("should be equal to false",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly(0/0);
}).

value;

assert.equal(result,false);

});
});


describe("`truly( '' )`",function(){
it("should be equal to false",function(){

var result=browser.url(bridgeURL).execute(

function(){
return truly("");
}).

value;

assert.equal(result,false);

});
});

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=test.bridge.js.map
