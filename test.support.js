"use strict";
























































var assert=require("should");




var truly=require("./truly.support.js");







describe("truly",function(){

describe("`truly( 'hello' )`",function(){
it("should be equal to true",function(){

assert.equal(truly("hello"),true);

});
});


describe("`truly( { } )`",function(){
it("should be equal to true",function(){

assert.equal(truly({}),true);

});
});


describe("`truly( [ ] )`",function(){
it("should be equal to true",function(){

assert.equal(truly([]),true);

});
});


describe("`truly( function( ){ } )`",function(){
it("should be equal to true",function(){

assert.equal(truly(function(){}),true);

});
});


describe("`truly( 123 )`",function(){
it("should be equal to true",function(){

assert.equal(truly(123),true);

});
});


describe("`truly( true )`",function(){
it("should be equal to true",function(){

assert.equal(truly(true),true);

});
});


describe("`truly( Infinity )`",function(){
it("should be equal to true",function(){

assert.equal(truly(Infinity),true);

});
});


describe("`truly( 0 )`",function(){
it("should be equal to true",function(){

assert.equal(truly(0),true);

});
});


describe("`truly( undefined )`",function(){
it("should be equal to false",function(){

assert.equal(truly(undefined),false);

});
});


describe("`truly( )`",function(){
it("should be equal to false",function(){

assert.equal(truly(),false);

});
});


describe("`truly( null )`",function(){
it("should be equal to false",function(){

assert.equal(truly(null),false);

});
});


describe("`truly( NaN )`",function(){
it("should be equal to false",function(){

assert.equal(truly(NaN),false);

});
});


describe("`truly( 0/0 )`",function(){
it("should be equal to false",function(){

assert.equal(truly(0/0),false);

});
});


describe("`truly( '' )`",function(){
it("should be equal to false",function(){

assert.equal(truly(""),false);

});
});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=test.support.js.map
